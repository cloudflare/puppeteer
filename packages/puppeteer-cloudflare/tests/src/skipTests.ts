// TODO review skipped tests
export const skipTests: string[][] = [
    ['browser-rendering/session-management.spec.ts', 'should close session when launched browser is closed'],
    ['browser-rendering/session-management.spec.ts', 'should keep session open when closing browser created with connect'],
    ['click.spec.ts', 'Page.click', 'should click the button with fixed position inside an iframe'],
    ['cookies.spec.ts', 'Cookie specs', 'Page.cookies', 'should get a cookie'],
    ['cookies.spec.ts', 'Cookie specs', 'Page.cookies', 'should get multiple cookies'],
    ['cookies.spec.ts', 'Cookie specs', 'Page.cookies', 'should return no cookies in pristine browser context'],
    ['cookies.spec.ts', 'Cookie specs', 'Page.deleteCookie', 'should delete cookie for specified URL'],
    ['cookies.spec.ts', 'Cookie specs', 'Page.deleteCookie', 'should not delete cookie for different domain'],
    ['cookies.spec.ts', 'Cookie specs', 'Page.setCookie', 'should isolate cookies in browser contexts'],
    ['cookies.spec.ts', 'Cookie specs', 'Page.setCookie', 'should set a cookie on a different domain'],
    ['cookies.spec.ts', 'Cookie specs', 'Page.setCookie', 'should set a cookie with a path'],
    ['cookies.spec.ts', 'Cookie specs', 'Page.setCookie', 'should set cookie with reasonable defaults'],
    ['cookies.spec.ts', 'Cookie specs', 'Page.setCookie', 'should set cookies from a frame'],
    ['coverage.spec.ts', 'Coverage specs', 'CSSCoverage', 'should work with complicated usecases'],
    ['coverage.spec.ts', 'Coverage specs', 'JSCoverage', 'resetOnNavigation', 'should report scripts across navigations when disabled'],
    ['coverage.spec.ts', 'Coverage specs', 'JSCoverage', 'should work with conditionals'],
    ['dialog.spec.ts', 'Page.Events.Dialog', 'should allow accepting prompts'],
    ['dialog.spec.ts', 'Page.Events.Dialog', 'should fire'],
    ['drag-and-drop.spec.ts', 'Drag n\\\' Drop', 'should drag and drop'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'Custom queries', 'should eval correctly'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'Custom queries', 'should eval when both queryOne and queryAll are registered'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'Custom queries', 'should register and unregister'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'Custom queries', 'should wait correctly with waitFor'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'Custom queries', 'should wait correctly with waitForSelector on an element'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'Custom queries', 'should wait correctly with waitForSelector'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'Custom queries', 'should work for multiple elements'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'Custom queries', 'should work when both queryOne and queryAll are registered'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'ElementHandle.click', 'should not work for TextNodes'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'ElementHandle.click', 'should throw for <br> elements'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'ElementHandle.click', 'should throw for detached nodes'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'ElementHandle.click', 'should throw for hidden nodes'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'ElementHandle.click', 'should throw for recursively hidden nodes'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'ElementHandle.move', 'should work'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'ElementHandle[Symbol.asyncDispose]', 'should work'],
    ['elementhandle.spec.ts', 'ElementHandle specs', 'ElementHandle[Symbol.dispose]', 'should work'],
    ['evaluation.spec.ts', 'Evaluation specs', 'Frame.evaluate', 'should execute after cross-site navigation'],
    ['evaluation.spec.ts', 'Evaluation specs', 'Page.evaluate', 'should replace symbols with undefined'],
    ['evaluation.spec.ts', 'Evaluation specs', 'Page.evaluate', 'should return properly serialize objects with unknown type fields'],
    ['evaluation.spec.ts', 'Evaluation specs', 'Page.evaluate', 'should throw if elementHandles are from other frames'],
    ['evaluation.spec.ts', 'Evaluation specs', 'Page.evaluate', 'should transfer 100Mb of data from page to node.js'],
    ['evaluation.spec.ts', 'Evaluation specs', 'Page.evaluate', 'should work for circular object'],
    ['frame.spec.ts', 'Frame specs', 'Frame Management', 'should handle nested frames'],
    ['frame.spec.ts', 'Frame specs', 'Frame.client', 'should return the client instance'],
    ['injected.spec.ts', 'PuppeteerUtil tests', 'createFunction tests', 'should work'],
    ['input.spec.ts', 'input tests', 'ElementHandle.uploadFile', 'should read the file'],
    ['input.spec.ts', 'input tests', 'FileChooser.accept', 'should be able to read selected file'],
    ['input.spec.ts', 'input tests', 'FileChooser.accept', 'should be able to reset selected files with empty file list'],
    ['jshandle.spec.ts', 'JSHandle', 'JSHandle.move', 'should work'],
    ['jshandle.spec.ts', 'JSHandle', 'JSHandle.toString', 'should work for complicated objects'],
    ['jshandle.spec.ts', 'JSHandle', 'JSHandle.toString', 'should work with window subtypes'],
    ['jshandle.spec.ts', 'JSHandle', 'JSHandle[Symbol.asyncDispose]', 'should work'],
    ['jshandle.spec.ts', 'JSHandle', 'JSHandle[Symbol.dispose]', 'should work'],
    ['jshandle.spec.ts', 'JSHandle', 'Page.evaluateHandle', 'should accept object handle as an argument'],
    ['keyboard.spec.ts', 'Keyboard', 'should report multiple modifiers'],
    ['keyboard.spec.ts', 'Keyboard', 'should report shiftKey'],
    ['keyboard.spec.ts', 'Keyboard', 'should send a character with sendCharacter in iframe'],
    ['keyboard.spec.ts', 'Keyboard', 'should send proper codes while typing with shift'],
    ['keyboard.spec.ts', 'Keyboard', 'should send proper codes while typing'],
    ['keyboard.spec.ts', 'Keyboard', 'should specify location'],
    ['keyboard.spec.ts', 'Keyboard', 'should type all kinds of characters'],
    ['locator.spec.ts', 'Locator', 'Locator.click', 'can be aborted'],
    ['locator.spec.ts', 'Locator', 'Locator.click', 'should retry clicks on errors'],
    ['locator.spec.ts', 'Locator', 'Locator.click', 'should time out'],
    ['locator.spec.ts', 'Locator', 'Locator.prototype.filter', 'should resolve as soon as the predicate matches'],
    ['locator.spec.ts', 'Locator', 'Locator.race', 'can be aborted'],
    ['locator.spec.ts', 'Locator', 'Locator.race', 'races multiple locators'],
    ['locator.spec.ts', 'Locator', 'Locator.race', 'should not time out when one of the locators matches'],
    ['locator.spec.ts', 'Locator', 'Locator.race', 'should time out when all locators do not match'],
    ['mouse.spec.ts', 'Mouse', 'should evaluate before mouse event'],
    ['mouse.spec.ts', 'Mouse', 'should not throw if buttons are pressed twice'],
    ['mouse.spec.ts', 'Mouse', 'should not throw if clicking in parallel'],
    ['mouse.spec.ts', 'Mouse', 'should reset properly'],
    ['mouse.spec.ts', 'Mouse', 'should work with mobile viewports and cross process navigations'],
    ['navigation.spec.ts', 'navigation', 'Page.goBack', 'should work'],
    ['navigation.spec.ts', 'navigation', 'Page.goto', 'should fail when main resources failed to load'],
    ['navigation.spec.ts', 'navigation', 'Page.goto', 'should fail when navigating and show the url at the error message'],
    ['navigation.spec.ts', 'navigation', 'Page.goto', 'should fail when navigating to bad SSL'],
    ['navigation.spec.ts', 'navigation', 'Page.goto', 'should fail when navigating to bad url'],
    ['navigation.spec.ts', 'navigation', 'Page.goto', 'should not leak listeners during bad navigation'],
    ['navigation.spec.ts', 'navigation', 'Page.goto', 'should not leak listeners during navigation of 11 pages'],
    ['navigation.spec.ts', 'navigation', 'Page.goto', 'should not leak listeners during navigation'],
    ['navigation.spec.ts', 'navigation', 'Page.goto', 'should work when page calls history API in beforeunload'],
    ['navigation.spec.ts', 'navigation', 'Page.goto', 'should work when reload causes history API in beforeunload'],
    ['oopif.spec.ts', 'OOPIF', 'clickablePoint, boundingBox, boxModel should work for elements inside OOPIFs'],
    ['oopif.spec.ts', 'OOPIF', 'should detect existing OOPIFs when Puppeteer connects to an existing page'],
    ['oopif.spec.ts', 'OOPIF', 'should evaluate on a page with a PDF viewer'],
    ['oopif.spec.ts', 'OOPIF', 'should expose events within OOPIFs'],
    ['oopif.spec.ts', 'OOPIF', 'should exposeFunction on a page with a PDF viewer'],
    ['oopif.spec.ts', 'OOPIF', 'should keep track of a frames OOP state'],
    ['oopif.spec.ts', 'OOPIF', 'should load oopif iframes with subresources and request interception'],
    ['oopif.spec.ts', 'OOPIF', 'should provide access to elements'],
    ['oopif.spec.ts', 'OOPIF', 'should recover cross-origin frames on reconnect'],
    ['oopif.spec.ts', 'OOPIF', 'should report google.com frame'],
    ['oopif.spec.ts', 'OOPIF', 'should report oopif frames'],
    ['oopif.spec.ts', 'OOPIF', 'should support evaluateOnNewDocument'],
    ['oopif.spec.ts', 'OOPIF', 'should support evaluating in oop iframes'],
    ['oopif.spec.ts', 'OOPIF', 'should support exposeFunction'],
    ['oopif.spec.ts', 'OOPIF', 'should support frames within OOP frames'],
    ['oopif.spec.ts', 'OOPIF', 'should support frames within OOP iframes'],
    ['oopif.spec.ts', 'OOPIF', 'should support lazy OOP frames'],
    ['oopif.spec.ts', 'OOPIF', 'should support OOP iframes becoming normal iframes again'],
    ['oopif.spec.ts', 'OOPIF', 'should support OOP iframes getting detached'],
    ['oopif.spec.ts', 'OOPIF', 'should support removing evaluateOnNewDocument scripts'],
    ['oopif.spec.ts', 'OOPIF', 'should support removing exposed function'],
    ['oopif.spec.ts', 'OOPIF', 'should support wait for navigation for transitions from local to OOPIF'],
    ['oopif.spec.ts', 'OOPIF', 'should track navigations within OOP iframes'],
    ['oopif.spec.ts', 'OOPIF', 'should treat OOP iframes and normal iframes the same'],
    ['oopif.spec.ts', 'OOPIF', 'should wait for inner OOPIFs'],
    ['oopif.spec.ts', 'OOPIF', 'waitForFrame', 'should resolve immediately if the frame already exists'],
    ['page.spec.ts', 'Page', 'Page.addScriptTag', 'should include sourcemap when path is provided'],
    ['page.spec.ts', 'Page', 'Page.addScriptTag', 'should throw when added with content to the CSP page'],
    ['page.spec.ts', 'Page', 'Page.addScriptTag', 'should work with a path and type=module'],
    ['page.spec.ts', 'Page', 'Page.addScriptTag', 'should work with a path'],
    ['page.spec.ts', 'Page', 'Page.addStyleTag', 'should include sourcemap when path is provided'],
    ['page.spec.ts', 'Page', 'Page.addStyleTag', 'should work with a path'],
    ['page.spec.ts', 'Page', 'Page.bringToFront', 'should work'],
    ['page.spec.ts', 'Page', 'Page.browser', 'should return the correct browser instance'],
    ['page.spec.ts', 'Page', 'Page.client', 'should return the client instance'],
    ['page.spec.ts', 'Page', 'Page.close', 'should *not* run beforeunload by default'],
    ['page.spec.ts', 'Page', 'Page.close', 'should not be visible in browser.pages'],
    ['page.spec.ts', 'Page', 'Page.close', 'should run beforeunload if asked for'],
    ['page.spec.ts', 'Page', 'Page.close', 'should terminate network waiters'],
    ['page.spec.ts', 'Page', 'Page.Events.Console', 'should have location when fetch fails'],
    ['page.spec.ts', 'Page', 'Page.Events.Console', 'should not fail for window object'],
    ['page.spec.ts', 'Page', 'Page.Events.Console', 'should return remote objects'],
    ['page.spec.ts', 'Page', 'Page.Events.Console', 'should trigger correct Log'],
    ['page.spec.ts', 'Page', 'Page.Events.error', 'should throw when page crashes'],
    ['page.spec.ts', 'Page', 'Page.exposeFunction', 'should throw exception in page context'],
    ['page.spec.ts', 'Page', 'Page.setUserAgent', 'should emulate device user-agent'],
    ['page.spec.ts', 'Page', 'Page.setUserAgent', 'should work for subframes'],
    ['page.spec.ts', 'Page', 'Page.setUserAgent', 'should work'],
    ['page.spec.ts', 'Page', 'removing and adding event handlers', 'should correctly added and removed request events'],
    ['page.spec.ts', 'Page', 'removing and adding event handlers', 'should correctly fire event handlers as they are added and then removed'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Pierce selectors', 'should find first element in shadow'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in ElementHandles', 'should query existing element'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in ElementHandles', 'should return null for non-existing element'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in Page', 'should clear caches'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in Page', 'should not query radio'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in Page', 'should pierce shadow DOM'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in Page', 'should query deeply nested text'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in Page', 'should query existing element'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in Page', 'should query inputs'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in Page', 'should query text spanning multiple elements'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in Page', 'should return empty array for non-existing element'],
    ['queryhandler.spec.ts', 'Query handler tests', 'Text selectors', 'in Page', 'should return first element'],
    ['queryselector.spec.ts', 'querySelector', 'Page.$$eval', 'should handle many elements'],
    ['queryselector.spec.ts', 'querySelector', 'Page.$eval', 'should work'],
    ['queryselector.spec.ts', 'querySelector', 'QueryAll', '$$ should query existing elements'],
    ['queryselector.spec.ts', 'querySelector', 'QueryAll', '$$ should return empty array for non-existing elements'],
    ['queryselector.spec.ts', 'querySelector', 'QueryAll', '$$eval should accept ElementHandles as arguments'],
    ['queryselector.spec.ts', 'querySelector', 'QueryAll', '$$eval should accept extra arguments'],
    ['queryselector.spec.ts', 'querySelector', 'QueryAll', '$$eval should handle many elements'],
    ['queryselector.spec.ts', 'querySelector', 'QueryAll', '$$eval should work'],
    ['queryselector.spec.ts', 'querySelector', 'QueryAll', 'should have registered handler'],
    ['touchscreen.spec.ts', 'Touchscreen', 'Touchscreen.prototype.tap', 'should work'],
];
